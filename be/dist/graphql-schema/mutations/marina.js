"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addMarina = void 0;

var _apolloServerKoa = require("apollo-server-koa");

var Yup = _interopRequireWildcard(require("yup"));

var _marina = require("../db/marina");

const schemaValidation = Yup.object().shape({
  name: Yup.string().min(3).required("Required"),
  photoUrl: Yup.string().url(),
  lat: Yup.number().required("Required"),
  lon: Yup.number().required("Required"),
  city: Yup.string().min(3).required("Required"),
  country: Yup.string().min(3).required("Required"),
  amenities: Yup.array().of(Yup.string().min(3)).required("Required")
});

const addMarina = async (parent, {
  input
}, ctx) => {
  return schemaValidation.isValid(input).then(isValid => {
    if (isValid) {
      return (0, _marina.saveMarinaToDb)(input);
    } else {
      throw new _apolloServerKoa.ApolloError("Invalid input arguments.");
    }
  }).then(async ([result]) => {
    if (result && result.length) {
      const marina = await (0, _marina.getMarinaBase)().where({
        id: result[0]
      }).first();
      return {
        marina
      };
    } else {
      throw new _apolloServerKoa.ApolloError("Marina not created.");
    }
  });
};

exports.addMarina = addMarina;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsLXNjaGVtYS9tdXRhdGlvbnMvbWFyaW5hLnRzIl0sIm5hbWVzIjpbInNjaGVtYVZhbGlkYXRpb24iLCJZdXAiLCJvYmplY3QiLCJzaGFwZSIsIm5hbWUiLCJzdHJpbmciLCJtaW4iLCJyZXF1aXJlZCIsInBob3RvVXJsIiwidXJsIiwibGF0IiwibnVtYmVyIiwibG9uIiwiY2l0eSIsImNvdW50cnkiLCJhbWVuaXRpZXMiLCJhcnJheSIsIm9mIiwiYWRkTWFyaW5hIiwicGFyZW50IiwiaW5wdXQiLCJjdHgiLCJpc1ZhbGlkIiwidGhlbiIsIkFwb2xsb0Vycm9yIiwicmVzdWx0IiwibGVuZ3RoIiwibWFyaW5hIiwid2hlcmUiLCJpZCIsImZpcnN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFFQTs7QUFLQSxNQUFNQSxnQkFBZ0IsR0FBR0MsR0FBRyxDQUFDQyxNQUFKLEdBQWFDLEtBQWIsQ0FBbUI7QUFDMUNDLEVBQUFBLElBQUksRUFBRUgsR0FBRyxDQUFDSSxNQUFKLEdBQ0hDLEdBREcsQ0FDQyxDQURELEVBRUhDLFFBRkcsQ0FFTSxVQUZOLENBRG9DO0FBSTFDQyxFQUFBQSxRQUFRLEVBQUVQLEdBQUcsQ0FBQ0ksTUFBSixHQUFhSSxHQUFiLEVBSmdDO0FBSzFDQyxFQUFBQSxHQUFHLEVBQUVULEdBQUcsQ0FBQ1UsTUFBSixHQUFhSixRQUFiLENBQXNCLFVBQXRCLENBTHFDO0FBTTFDSyxFQUFBQSxHQUFHLEVBQUVYLEdBQUcsQ0FBQ1UsTUFBSixHQUFhSixRQUFiLENBQXNCLFVBQXRCLENBTnFDO0FBTzFDTSxFQUFBQSxJQUFJLEVBQUVaLEdBQUcsQ0FBQ0ksTUFBSixHQUNIQyxHQURHLENBQ0MsQ0FERCxFQUVIQyxRQUZHLENBRU0sVUFGTixDQVBvQztBQVUxQ08sRUFBQUEsT0FBTyxFQUFFYixHQUFHLENBQUNJLE1BQUosR0FDTkMsR0FETSxDQUNGLENBREUsRUFFTkMsUUFGTSxDQUVHLFVBRkgsQ0FWaUM7QUFhMUNRLEVBQUFBLFNBQVMsRUFBRWQsR0FBRyxDQUFDZSxLQUFKLEdBQ1JDLEVBRFEsQ0FDTGhCLEdBQUcsQ0FBQ0ksTUFBSixHQUFhQyxHQUFiLENBQWlCLENBQWpCLENBREssRUFFUkMsUUFGUSxDQUVDLFVBRkQ7QUFiK0IsQ0FBbkIsQ0FBekI7O0FBa0JPLE1BQU1XLFNBQVMsR0FBRyxPQUN2QkMsTUFEdUIsRUFFdkI7QUFBRUMsRUFBQUE7QUFBRixDQUZ1QixFQUd2QkMsR0FIdUIsS0FJcEI7QUFDSCxTQUFPckIsZ0JBQWdCLENBQ3BCc0IsT0FESSxDQUNJRixLQURKLEVBRUpHLElBRkksQ0FFRUQsT0FBRCxJQUFhO0FBQ2pCLFFBQUlBLE9BQUosRUFBYTtBQUNYLGFBQU8sNEJBQWVGLEtBQWYsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMLFlBQU0sSUFBSUksNEJBQUosQ0FBZ0IsMEJBQWhCLENBQU47QUFDRDtBQUNGLEdBUkksRUFTSkQsSUFUSSxDQVNDLE9BQU8sQ0FBQ0UsTUFBRCxDQUFQLEtBQW9CO0FBQ3hCLFFBQUlBLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxNQUFyQixFQUE2QjtBQUMzQixZQUFNQyxNQUFNLEdBQUcsTUFBTSw2QkFDbEJDLEtBRGtCLENBQ1o7QUFBRUMsUUFBQUEsRUFBRSxFQUFFSixNQUFNLENBQUMsQ0FBRDtBQUFaLE9BRFksRUFFbEJLLEtBRmtCLEVBQXJCO0FBR0EsYUFBTztBQUFFSCxRQUFBQTtBQUFGLE9BQVA7QUFDRCxLQUxELE1BS087QUFDTCxZQUFNLElBQUlILDRCQUFKLENBQWdCLHFCQUFoQixDQUFOO0FBQ0Q7QUFDRixHQWxCSSxDQUFQO0FBbUJELENBeEJNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBvbGxvRXJyb3IgfSBmcm9tIFwiYXBvbGxvLXNlcnZlci1rb2FcIjtcbmltcG9ydCB7IGZyb21HbG9iYWxJZCB9IGZyb20gXCJncmFwaHFsLXJlbGF5XCI7XG5pbXBvcnQgKiBhcyBZdXAgZnJvbSBcInl1cFwiO1xuXG5pbXBvcnQgeyBnZXRNYXJpbmFCYXNlLCBzYXZlTWFyaW5hVG9EYiB9IGZyb20gXCIuLi9kYi9tYXJpbmFcIjtcblxuaW1wb3J0IHsgQXBvbGxvQ29udGV4dCB9IGZyb20gXCIuLi90eXBlcy9BcG9sbG9Db250ZXh0XCI7XG5pbXBvcnQgeyBNdXRhdGlvbkFkZE1hcmluYUFyZ3MgfSBmcm9tIFwiLi4vdHlwZXMvR2VuZXJhdGVkR3FsXCI7XG5cbmNvbnN0IHNjaGVtYVZhbGlkYXRpb24gPSBZdXAub2JqZWN0KCkuc2hhcGUoe1xuICBuYW1lOiBZdXAuc3RyaW5nKClcbiAgICAubWluKDMpXG4gICAgLnJlcXVpcmVkKFwiUmVxdWlyZWRcIiksXG4gIHBob3RvVXJsOiBZdXAuc3RyaW5nKCkudXJsKCksXG4gIGxhdDogWXVwLm51bWJlcigpLnJlcXVpcmVkKFwiUmVxdWlyZWRcIiksXG4gIGxvbjogWXVwLm51bWJlcigpLnJlcXVpcmVkKFwiUmVxdWlyZWRcIiksXG4gIGNpdHk6IFl1cC5zdHJpbmcoKVxuICAgIC5taW4oMylcbiAgICAucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcbiAgY291bnRyeTogWXVwLnN0cmluZygpXG4gICAgLm1pbigzKVxuICAgIC5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxuICBhbWVuaXRpZXM6IFl1cC5hcnJheSgpXG4gICAgLm9mKFl1cC5zdHJpbmcoKS5taW4oMykpXG4gICAgLnJlcXVpcmVkKFwiUmVxdWlyZWRcIiksXG59KTtcblxuZXhwb3J0IGNvbnN0IGFkZE1hcmluYSA9IGFzeW5jIChcbiAgcGFyZW50OiB1bmtub3duLFxuICB7IGlucHV0IH06IE11dGF0aW9uQWRkTWFyaW5hQXJncyxcbiAgY3R4OiBBcG9sbG9Db250ZXh0XG4pID0+IHtcbiAgcmV0dXJuIHNjaGVtYVZhbGlkYXRpb25cbiAgICAuaXNWYWxpZChpbnB1dClcbiAgICAudGhlbigoaXNWYWxpZCkgPT4ge1xuICAgICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIHNhdmVNYXJpbmFUb0RiKGlucHV0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBBcG9sbG9FcnJvcihcIkludmFsaWQgaW5wdXQgYXJndW1lbnRzLlwiKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC50aGVuKGFzeW5jIChbcmVzdWx0XSkgPT4ge1xuICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IG1hcmluYSA9IGF3YWl0IGdldE1hcmluYUJhc2UoKVxuICAgICAgICAgIC53aGVyZSh7IGlkOiByZXN1bHRbMF0gfSlcbiAgICAgICAgICAuZmlyc3QoKTtcbiAgICAgICAgcmV0dXJuIHsgbWFyaW5hIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgQXBvbGxvRXJyb3IoXCJNYXJpbmEgbm90IGNyZWF0ZWQuXCIpO1xuICAgICAgfVxuICAgIH0pO1xufTtcbiJdfQ==